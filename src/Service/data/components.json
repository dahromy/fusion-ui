[
  {
    "name": "accordion",
    "dependencies": [],
    "registryDependencies": [],
    "iconDependencies": [
      "radix-icons:caret-down"
    ],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/accordion",
        "content": "{% props type = \"single\" %}\n\n<div{{ attributes.add(stimulus_controller('ui--accordion', { type })) }}>\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "trigger.html.twig",
        "dir": "templates/components/ui/accordion",
        "content": "<button {{ attributes.add(stimulus_target('ui--accordion', 'trigger')).add(stimulus_action('ui--accordion', 'toggle', 'click')).without('class') }}\n        type=\"button\" aria-expanded=\"false\"\n        data-state=\"closed\"\n        class=\"{{ [attributes.render('class') ?? 'w-full flex flex-1 items-center w-full justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>span>svg]:rotate-180']| tailwind_merge }}\"\n>\n    {% block content %}{% endblock %}\n</button>"
      },
      {
        "name": "item.html.twig",
        "dir": "templates/components/ui/accordion",
        "content": "{% props disabled = false %}\n\n<div{{ attributes.add(stimulus_target('ui--accordion', 'item')).add(stimulus_action('ui--accordion', 'keydown', 'keydown')).without('class') }}\n        {% if disabled %} data-disabled {% endif %} data-state=\"closed\"\n        class=\"{{ [attributes.render('class') ?? 'border-b st-accordion']|tailwind_merge }}\"\n>\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "icon.html.twig",
        "dir": "templates/components/ui/accordion",
        "content": "<span{{ attributes.add(stimulus_target('ui--accordion', 'icon')).without('class') }} class=\"{{ ['opacity-50', attributes.render('class')] | tailwind_merge }}\">\n    {% if block('content') is defined and block('content') is not empty %}\n        {% block content %}{% endblock %}\n    {% else %}\n        <twig:ux:icon name=\"radix-icons:caret-down\"\n                      class=\"h-5 w-5 shrink-0 text-muted-foreground transition-transform duration-200\"/>\n    {% endif %}\n</span>"
      },
      {
        "name": "default_trigger.html.twig",
        "dir": "templates/components/ui/accordion",
        "content": "<button {{ attributes.add(stimulus_target('ui--accordion', 'trigger')).add(stimulus_action('ui--accordion', 'toggle', 'click')).without('class') }}\n        type=\"button\" aria-expanded=\"false\"\n        class=\"{{ ['flex flex-1 items-center w-full justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>span>svg]:rotate-180', attributes.render('class')]| tailwind_merge }}\"\n>\n    <p>{% block content %}{% endblock %}</p>\n    <twig:ui:accordion:icon/>\n</button>"
      },
      {
        "name": "content.html.twig",
        "dir": "templates/components/ui/accordion",
        "content": "<div{{ attributes.add(stimulus_target('ui--accordion', 'content')).without('class') }}\n        class=\"{{ 'overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down'|tailwind_merge }}\"\n        hidden\n>\n    <div class=\"{{ ['pb-4 pt-0', attributes.render('class')]|tailwind_merge }}\">\n        {% block content %}{% endblock %}\n    </div>\n</div>"
      },
      {
        "name": "accordion_controller.js",
        "dir": "assets/controllers/ui",
        "content": "import {Controller} from \"@hotwired/stimulus\";\n\nconst ACCORDION_KEYS = ['Home', 'End', 'ArrowDown', 'ArrowUp', 'ArrowLeft', 'ArrowRight'];\n\nexport default class UIAccordion extends Controller {\n    static targets = [\"item\", \"trigger\", \"content\"];\n    static values = {type: String}\n\n    initialize() {\n        // validate value type\n        if (!['single', 'multiple'].includes(this.typeValue)) {\n            throw new Error('Failed prop type: Invalid prop `type` supplied to `accordion:root`. Expected one of `single | multiple`.')\n        }\n\n        this.setIndicesAndStyles(this.itemTargets);\n        this.setIndicesAndStyles(this.triggerTargets);\n        this.setIndicesAndStyles(this.contentTargets, content => {\n            content.style.setProperty('--radix-accordion-content-height', 'var(--radix-collapsible-content-height)');\n            content.style.setProperty('--radix-accordion-content-width', 'var(--radix-collapsible-content-width)');\n        });\n    }\n\n    setIndicesAndStyles(targetsArray, extraOperation = () => {\n    }) {\n        targetsArray.forEach((item, index) => {\n            item.setAttribute(\"data-index\", index);\n            extraOperation(item);\n        });\n    }\n\n    keydown(event) {\n        if (!ACCORDION_KEYS.includes(event.key)) return;\n\n        const target = event.target;\n        const orientation = this.element.getAttribute(\"data-orientation\");\n        const isDirectionLTR = this.element.getAttribute(\"data-direction\") === 'ltr';\n        const triggerIndex = parseInt(target.getAttribute(\"data-index\"));\n        const triggerCount = this.triggerTargets.length;\n\n        if (triggerIndex === -1) return;\n\n        // Prevents page scroll while user is navigating\n        event.preventDefault();\n\n        let nextIndex = triggerIndex;\n        const homeIndex = 0;\n        const endIndex = triggerCount - 1;\n\n        const operations = {\n            moveNext: () => {\n                nextIndex = triggerIndex + 1;\n                nextIndex = nextIndex > endIndex ? homeIndex : nextIndex;\n            }, movePrev: () => {\n                nextIndex = triggerIndex - 1;\n                nextIndex = nextIndex < homeIndex ? endIndex : nextIndex;\n            }\n        };\n        const keyMappings = {\n            \"Home\": () => nextIndex = homeIndex, \"End\": () => nextIndex = endIndex, \"ArrowRight\": () => {\n                if (orientation === 'horizontal') {\n                    isDirectionLTR ? operations.moveNext() : operations.movePrev();\n                }\n            }, \"ArrowDown\": () => {\n                if (orientation === 'vertical') {\n                    operations.moveNext();\n                }\n            }, \"ArrowLeft\": () => {\n                if (orientation === 'horizontal') {\n                    isDirectionLTR ? operations.movePrev() : operations.moveNext();\n                }\n            }, \"ArrowUp\": () => {\n                if ('vertical' === orientation) {\n                    operations.movePrev();\n                }\n            }\n        };\n\n        const keyFunction = keyMappings[event.key];\n        if (keyFunction) {\n            keyFunction();\n        }\n\n        const clampedIndex = nextIndex % triggerCount;\n        this.triggerTargets[clampedIndex]?.focus();\n    }\n\n    setElementState(element, isOpen) {\n        const stateStr = isOpen ? 'open' : 'closed';\n        element.dataset.state = stateStr;\n    }\n\n    setInitialContentProperties(contentElement, isOpen) {\n        contentElement.hidden = isOpen;\n        contentElement.style.setProperty('--radix-collapsible-content-height', contentElement.scrollHeight + \"px\");\n        contentElement.style.setProperty('--radix-collapsible-content-width', contentElement.scrollWidth + \"px\");\n        contentElement.hasBeenClicked = true;\n    }\n\n    closeLastOpenedElement(index) {\n        if (this.lastOpenIndex !== undefined && this.lastOpenIndex !== index) {\n            const lastContent = this.contentTargets[this.lastOpenIndex];\n            const lastItem = this.itemTargets[this.lastOpenIndex];\n            const lastTrigger = this.triggerTargets[this.lastOpenIndex];\n\n            this.setElementState(lastContent, false);\n            this.setElementState(lastItem, false);\n            this.setElementState(lastTrigger, false);\n\n            setTimeout(() => {\n                lastContent.hidden = true;\n            }, 180);\n        }\n    }\n\n    toggle(event) {\n        event.preventDefault();\n        const trigger = event.currentTarget;\n\n        const triggerIndex = parseInt(trigger.getAttribute(\"data-index\"));\n        const content = this.contentTargets[triggerIndex];\n        const item = this.itemTargets[triggerIndex];\n\n        if (item.hasAttribute('data-disabled')) return;\n\n        if (this.typeValue !== 'multiple') {\n            this.closeLastOpenedElement(triggerIndex);\n        }\n\n        const shouldOpen = content.dataset.state !== 'open';\n\n        this.setElementState(content, shouldOpen);\n        this.setElementState(item, shouldOpen);\n        this.setElementState(trigger, shouldOpen);\n        trigger.setAttribute('aria-expanded', shouldOpen);\n\n        if (!content.hasBeenClicked) {\n            this.setInitialContentProperties(content, !shouldOpen);\n        } else {\n            if (!shouldOpen) {\n                setTimeout(() => {\n                    content.hidden = true;\n                }, 180);\n            } else {\n                content.hidden = false;\n            }\n        }\n\n        this.lastOpenIndex = triggerIndex;\n    }\n}"
      }
    ],
    "type": "ui"
  },
  {
    "name": "alert",
    "dependencies": [],
    "registryDependencies": [],
    "iconDependencies": [],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/alert",
        "content": "{% props variant = 'default' %}\n\n{% set alertVariants = cva({\n    base: 'backdrop-blur relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7 ',\n    variants: {\n        variant: {\n            default: \"bg-muted/20 text-foreground\",\n            destructive: \"bg-destructive/5 border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n            warning: \"bg-warning/5 border-warning/50 text-warning dark:border-warning [&>svg]:text-warning\",\n            success: \"bg-success/5 border-success/50 text-success dark:border-success [&>svg]:text-success\",\n        }\n    },\n    defaultVariants: {\n        variant: \"default\",\n    },\n}) %}\n\n<div{{ attributes.without('class') }}\n        class=\"{{ alertVariants.apply({ variant }, attributes.render('class') ?? '') | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "title.html.twig",
        "dir": "templates/components/ui/alert",
        "content": "<div{{ attributes.without('class') }}\n        class=\"{{ ['mb-1 font-medium leading-none tracking-tight', attributes.render('class')]|tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "description.html.twig",
        "dir": "templates/components/ui/alert",
        "content": "<div{{ attributes.without('class') }}\n        class=\"{{ ['text-sm [&_p]:leading-relaxed', attributes.render('class')] | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      }
    ],
    "type": "ui"
  },
  {
    "name": "alert-dialog",
    "dependencies": [
      "@kanety/stimulus-static-actions"
    ],
    "registryDependencies": [
      "button"
    ],
    "iconDependencies": [],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "<div{{ attributes.add(stimulus_controller('ui--alert-dialog')) }}>\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "action.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "{% set attrs = attributes.add(stimulus_target('ui--alert-dialog', 'action')) %}\n\n{% component 'ui:button:root' with {...attrs} %}\n    {% block content %}{{ block(outerBlocks.content) }}{% endblock %}\n{% endcomponent %}"
      },
      {
        "name": "cancel.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "{% set attrs = attributes.add(stimulus_target('ui--alert-dialog', 'cancel')) %}\n\n{% component 'ui:button:root' with {...attrs} %}\n    {% block content %}{{ block(outerBlocks.content) }}{% endblock %}\n{% endcomponent %}"
      },
      {
        "name": "content.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "<twig:ui:alert-dialog:overlay/>\n<div {{ attributes.add(stimulus_target('ui--alert-dialog', 'content')).without('class') }}\n        role=\"alertdialog\" data-state=\"closed\" data-aria-hidden=\"true\" aria-hidden=\"true\" hidden\n        style=\"display:none;\"\n        class=\"{{ [attributes.render('class'), 'fixed left-[50%] top-[50%] z-50 grid gap-4 w-full max-w-lg translate-x-[-50%] translate-y-[-50%]  border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg'] | tailwind_merge }}\"\n>\n    {% block content %}{% endblock %}\n</div>\n"
      },
      {
        "name": "description.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "<div{{ attributes.add(stimulus_target('ui--alert-dialog', 'description')).without('class') }}\n        class=\"{{ ['text-sm text-muted-foreground', attributes.render('class')] | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "footer.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "<div{{ attributes.add(stimulus_target('ui--alert-dialog', 'footer')).without('class') }}\n        class=\"{{ ['flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', attributes.render('class')] | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "header.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "<div{{ attributes.add(stimulus_target('ui--alert-dialog', 'header')).without('class') }}\n        class=\"{{ ['flex flex-col space-y-2 text-center sm:text-left', attributes.render('class')] | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "overlay.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "<div{{ attributes.add(stimulus_target('ui--alert-dialog', 'overlay')).without('class') }}\n        hidden\n        data-state=\"closed\" data-aria-hidden=\"true\" aria-hidden=\"true\"\n        class=\"{{ ['fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0', attributes.render('class')] | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "title.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "<div{{ attributes.add(stimulus_target('ui--alert-dialog', 'title')).without('class') }}\n        class=\"{{ ['text-lg font-semibold', attributes.render('class')] | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "trigger.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "<div{{ attributes.add(stimulus_target('ui--alert-dialog', 'trigger')).add(stimulus_action('ui--alert-dialog', 'open', 'click')) }}>\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "alert-dialog_controller.js",
        "dir": "assets/controllers/ui",
        "content": "import {Controller} from \"@hotwired/stimulus\";\nimport '@kanety/stimulus-static-actions';\n\nexport default class UIAlertDialog extends Controller {\n    static targets = ['trigger', 'content', 'action', 'cancel', 'overlay'];\n    static actions = [\n        ['trigger', 'click->open'],\n        ['cancel', 'click->close'],\n        ['action', 'click->close']\n    ];\n\n    setDataState(target, state) {\n        target.setAttribute('data-state', state);\n    }\n\n    setAriaAttributes(target, expanded) {\n        target.setAttribute('aria-expanded', expanded);\n        target.setAttribute('aria-hidden', expanded === 'true' ? 'false' : 'true');\n        target.setAttribute('data-aria-hidden', expanded === 'true' ? 'false' : 'true');\n    }\n\n    setVisualAttributes(target, hidden, display) {\n        target.hidden = hidden;\n        if (display !== null) {\n            target.style.display = display;\n        }\n    }\n\n    open(e) {\n        this.triggerButton = e.target;\n        this.setDataState(this.element, 'open');\n        this.setDataState(this.triggerButton, 'open');\n        this.setDataState(this.contentTarget, 'open');\n        this.setDataState(this.overlayTarget, 'open');\n        this.setAriaAttributes(this.triggerButton, 'true');\n        this.setVisualAttributes(this.contentTarget, false, null);\n        this.setVisualAttributes(this.overlayTarget, false, null);\n        this.contentTarget.style.removeProperty('display');\n    }\n\n    close() {\n        this.setDataState(this.element, 'closed');\n        this.setDataState(this.triggerButton, 'closed');\n        this.setDataState(this.contentTarget, 'closed');\n        this.setDataState(this.overlayTarget, 'closed');\n        this.setAriaAttributes(this.triggerButton, 'false');\n\n        setTimeout(() => {\n            this.setVisualAttributes(this.contentTarget, true, 'none');\n            this.setVisualAttributes(this.overlayTarget, true, null);\n        }, 120)\n    }\n}"
      }
    ],
    "type": "ui"
  },
  {
    "name": "button",
    "dependencies": [],
    "registryDependencies": [],
    "iconDependencies": [],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/button",
        "content": "{% props variant = 'default', size = 'default' %}\n\n{% set buttonVariants = cva({\n    base: 'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 ',\n    variants: {\n        variant: {\n            default:\"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n            destructive:\"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n            outline:\"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n            secondary:\"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n            ghost: \"hover:bg-accent hover:text-accent-foreground\",\n            link: \"text-primary underline-offset-4 hover:underline\",\n        },\n        size: {\n            default: \"h-9 px-4 py-2\",\n            sm: \"h-8 rounded-md px-3 text-xs\",\n            lg: \"h-10 rounded-md px-8\",\n            icon: \"h-9 w-9\",\n        },\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\",\n    },\n}) %}\n\n{% set hasHref = attributes.all.href is defined %}\n{% set slot = hasHref ? 'a' : 'button' %}\n\n<{{ slot }}{{ attributes.without('class') }} class=\"{{ buttonVariants.apply({ variant, size }, attributes.render('class') ?? '') | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</{{ slot }}>"
      }
    ]
  },
  {
    "name": "aspect-ratio",
    "dependencies": [],
    "registryDependencies": [],
    "iconDependencies": [],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/aspect-ratio",
        "content": "{% props ratio = \"1/1\" %}\n\n{% set aspectRatioArray = ratio|split('/') %}\n{% set result = (aspectRatioArray[1]|number_format)/(aspectRatioArray[0]|number_format)*100 %}\n\n<div class=\"relative w-full\" style=\"padding-bottom: {{ result }}%;\">\n    <div{{ attributes.without('class') }}\n            class=\"{{ ['bg-muted absolute inset-0 [&>img]:object-cover [&>img]:absolute [&>img]:h-full [&>img]:w-full [&>img]:inset-0 [&>img]:text-transparent', attributes.render('class')] | tailwind_merge }}\">\n        {% block content %}{% endblock %}\n    </div>\n</div>"
      }
    ]
  },
  {
    "name": "avatar",
    "dependencies": [],
    "registryDependencies": [],
    "iconDependencies": [],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/avatar",
        "content": "{% props size = 'md' %}\n\n{% set avatarVariants = cva({\n    base: 'relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full',\n    variants: {\n        size: {\n            xs: \"h-4 w-4 text-[0.5rem]\",\n            sm: \"h-6 w-6 text-xs\",\n            md: \"h-10 w-10 text-base\",\n            lg: \"h-14 w-14 text-xl\",\n            xl: \"h-20 w-20 text-3xl\"\n        }\n    },\n    defaultVariants: {\n        size: \"md\"\n    },\n}) %}\n\n<span {{ attributes.add(stimulus_controller('ui--avatar')).without('class') }} class=\"{{ avatarVariants.apply({size}, attributes.render('class') ?? '') | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</span>"
      },
      {
        "name": "image.html.twig",
        "dir": "templates/components/ui/avatar",
        "content": "<img {{ attributes.add(stimulus_target('ui--avatar', 'image')).without('class') }}\n        loading=\"lazy\"\n        class=\"{{ ['aspect-square h-full w-full', attributes.render('class')] | tailwind_merge }}\"\n        hidden>"
      },
      {
        "name": "fallback.html.twig",
        "dir": "templates/components/ui/avatar",
        "content": "{% props delay = 0 %}\n\n<span hidden {{ attributes.add(stimulus_target('ui--avatar', 'fallback')).without('class') }} data-delay=\"{{ delay }}\"\n      class=\"{{ ['flex h-full w-full items-center justify-center rounded-full bg-muted', attributes.render('class')] | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</span>"
      },
      {
        "name": "avatar_controller.js",
        "dir": "assets/controllers/ui",
        "content": "import {Controller} from \"@hotwired/stimulus\";\n\nconst LOADING_STATUS = ['idle', 'loading', 'loaded', 'failed']\n\nexport default class UIAvatar extends Controller {\n    static targets = ['image', 'fallback']\n    static values = {\n        status: {type: String, default: LOADING_STATUS[0]},\n    }\n\n    initialize() {\n        this.src = this.imageTarget.src\n        this.delay = this.fallbackTarget.dataset.delay\n    }\n\n    async connect() {\n        this.waitAndLoadImage(this.delay, this.src)\n    }\n\n    waitAndLoadImage(delay, src) {\n        if (Number(delay) !== 0) {\n            window.setTimeout(() => {\n                this.imageLoadingStatus(src)\n            }, delay)\n        } else {\n            this.imageLoadingStatus(src)\n        }\n    }\n\n    statusValueChanged() {\n        this.handleVisibility(LOADING_STATUS[2], false, true)\n        this.handleVisibility(LOADING_STATUS[3], true, false)\n    }\n\n    handleVisibility(status, imageHidden, fallbackHidden) {\n        if (this.statusValue === status) {\n            this.imageTarget.hidden = imageHidden\n            this.fallbackTarget.hidden = fallbackHidden\n        }\n    }\n\n    imageLoadingStatus(src) {\n        if (!src) {\n            this.statusValue = LOADING_STATUS[3];\n            return;\n        }\n        this.loadImage(src)\n    }\n\n    loadImage(src) {\n        const image = new window.Image()\n        const updateStatus = (status) => {\n            if (this.statusValue === LOADING_STATUS[3]) return;\n            this.statusValue = status\n        }\n\n        this.statusValue = LOADING_STATUS[1]\n        image.onload = () => updateStatus(LOADING_STATUS[2])\n        image.onerror = () => updateStatus(LOADING_STATUS[3])\n        image.src = src\n    }\n}"
      }
    ]
  },
  {
    "name": "badge",
    "dependencies": [],
    "registryDependencies": [],
    "iconDependencies": [],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/badge",
        "content": "{% props variant = 'default', size = 'md' %}\n\n{% set badgeVariants = cva({\n    base: 'inline-flex items-center rounded-md border px-2 py-0.5 font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n    variants: {\n        variant: {\n            default: \"border-primary bg-primary text-primary-foreground hover:bg-primary/80\",\n            secondary:\"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n            destructive:\"text-destructive border-destructive/50 bg-destructive/10 hover:bg-destructive/20\",\n            outline: \"text-foreground hover:bg-foreground/5\",\n            success: \"text-success border-success/50 bg-success/10 hover:bg-success/20\",\n            warning: \"text-warning border-warning/50 bg-warning/10 hover:bg-warning/20\",\n            slate: \"text-slate-500 border-slate-500/50 bg-slate-500/10 hover:bg-slate-500/20\",\n            gray: \"text-gray-500 border-gray-500/50 bg-gray-500/10 hover:bg-gray-500/20\",\n            zinc: \"text-zinc-500 border-zinc-500/50 bg-zinc-500/10 hover:bg-zinc-500/20\",\n            neutral: \"text-neutral-500 border-neutral-500/50 bg-neutral-500/10 hover:bg-neutral-500/20\",\n            stone: \"text-stone-500 border-stone-500/50 bg-stone-500/10 hover:bg-stone-500/20\",\n            red: \"text-red-500 border-red-500/50 bg-red-500/10 hover:bg-red-500/20\",\n            orange: \"text-orange-500 border-orange-500/50 bg-orange-500/10 hover:bg-orange-500/20\",\n            amber: \"text-amber-500 border-amber-500/50 bg-amber-500/10 hover:bg-amber-500/20\",\n            yellow: \"text-yellow-500 border-yellow-500/50 bg-yellow-500/10 hover:bg-yellow-500/20\",\n            lime: \"text-lime-500 border-lime-500/50 bg-lime-500/10 hover:bg-lime-500/20\",\n            green: \"text-green-500 border-green-500/50 bg-green-500/10 hover:bg-green-500/20\",\n            emerald: \"text-emerald-500 border-emerald-500/50 bg-emerald-500/10 hover:bg-emerald-500/20\",\n            teal: \"text-teal-500 border-teal-500/50 bg-teal-500/10 hover:bg-teal-500/20\",\n            cyan: \"text-cyan-500 border-cyan-500/50 bg-cyan-500/10 hover:bg-cyan-500/20\",\n            sky: \"text-sky-500 border-sky-500/50 bg-sky-500/10 hover:bg-sky-500/20\",\n            blue: \"text-blue-500 border-blue-500/50 bg-blue-500/10 hover:bg-blue-500/20\",\n            indigo: \"text-indigo-500 border-indigo-500/50 bg-indigo-500/10 hover:bg-indigo-500/20\",\n            violet: \"text-violet-500 border-violet-500/50 bg-violet-500/10 hover:bg-violet-500/20\",\n            purple: \"text-purple-500 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20\",\n            fuchsia: \"text-fuchsia-500 border-fuchsia-500/50 bg-fuchsia-500/10 hover:bg-fuchsia-500/20\",\n            pink: \"text-pink-500 border-pink-500/50 bg-pink-500/10 hover:bg-pink-500/20\",\n            rose: \"text-rose-500 border-rose-500/50 bg-rose-500/10 hover:bg-rose-500/20\",\n        },\n        size: {\n            sm: \"h-4 text-xs\",\n            md: \"h-6 py-0.5 text-xs\",\n            lg: \"h-8 text-sm\",\n            xl: \"h-10 text-base\",\n        }\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"md\"\n    },\n}) %}\n\n<div{{ attributes.without('class') }}\n        class=\"{{ badgeVariants.apply({ variant, size }, attributes.render('class') ?? '') | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      }
    ]
  },
  {
    "name": "card",
    "dependencies": [],
    "registryDependencies": [],
    "iconDependencies": [],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/card",
        "content": "<div{{ attributes.without('class') }}\n        class=\"{{ ['rounded-xl border bg-card text-card-foreground shadow', attributes.render('class')] |tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "header.html.twig",
        "dir": "templates/components/ui/card",
        "content": "<div{{ attributes.without('class') }}\n        class=\"{{ ['flex flex-col space-y-1.5 p-6', attributes.render('class')] |tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "footer.html.twig",
        "dir": "templates/components/ui/card",
        "content": "<div{{ attributes.without('class') }}\n        class=\"{{ ['flex items-center p-6 pt-0', attributes.render('class')] |tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "content.html.twig",
        "dir": "templates/components/ui/card",
        "content": "<div{{ attributes.without('class') }}\n        class=\"{{ ['p-6 pt-0', attributes.render('class')] |tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "description.html.twig",
        "dir": "templates/components/ui/card",
        "content": "<div{{ attributes.without('class') }}\n        class=\"{{ ['text-sm text-muted-foreground', attributes.render('class')] |tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "title.html.twig",
        "dir": "templates/components/ui/card",
        "content": "<div{{ attributes.without('class') }}\n        class=\"{{ ['font-semibold leading-none tracking-tight', attributes.render('class')] |tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      }
    ]
  },
  {
    "name": "carousel",
    "dependencies": [
      "embla-carousel",
      "@kanety/stimulus-static-actions"
    ],
    "registryDependencies": [
      "button"
    ],
    "iconDependencies": [
      "radix-icons:arrow-right",
      "radix-icons:arrow-left"
    ],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/carousel",
        "content": "{% props opts = {}, orientation = \"horizontal\" %}\n\n{% set options = {...opts, axis: orientation == 'horizontal' ? 'x' : 'y'} %}\n\n<div{{ attributes.add(stimulus_controller('ui--carousel', {orientation, options})).without('class') }}\n        class=\"{{ ['relative', attributes.render('class')] | tailwind_merge }}\"\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n>\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "content.html.twig",
        "dir": "templates/components/ui/carousel",
        "content": "<div class=\"overflow-hidden\" {{ stimulus_target('ui--carousel', 'carousel') }}>\n    <div {{ attributes.add(stimulus_target('ui--carousel', 'content')).without('class') }} class=\"{{ ['flex', attributes.render('class')] | tailwind_merge }}\">\n        {% block content %}{% endblock %}\n    </div>\n</div>"
      },
      {
        "name": "item.html.twig",
        "dir": "templates/components/ui/carousel",
        "content": "<div{{ attributes.add(stimulus_target('ui--carousel', 'item')).without('class') }}\n        class=\"{{ ['min-w-0 shrink-0 grow-0 basis-full', attributes.render('class')] | tailwind_merge }}\"\n        role=\"group\"\n        aria-roledescription=\"slide\"\n>\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "next.html.twig",
        "dir": "templates/components/ui/carousel",
        "content": "{% props variant = 'outline', size = 'icon' %}\n\n{% set attrs = attributes.add(stimulus_target('ui--carousel', 'next')).without('class').defaults({\n    class: [\"absolute h-8 w-8 rounded-full\", attributes.render('class')] | tailwind_merge,\n    variant,\n    size\n}) %}\n\n{% component 'ui:button:root' with {...attrs} %}\n    {% block content %}\n        <twig:ux:icon name=\"radix-icons:arrow-right\" class=\"w-4 h-4\"/>\n        <span class=\"sr-only\">Next slide</span>\n    {% endblock %}\n{% endcomponent %}"
      },
      {
        "name": "previous.html.twig",
        "dir": "templates/components/ui/carousel",
        "content": "{% props variant = 'outline', size = 'icon' %}\n\n{% set attrs = attributes.add(stimulus_target('ui--carousel', 'previous')).without('class').defaults({\n    class: [\"absolute h-8 w-8 rounded-full\", attributes.render('class')] | tailwind_merge,\n    variant,\n    size\n}) %}\n\n{% component 'ui:button:root' with {...attrs} %}\n    {% block content %}\n        <twig:ux:icon name=\"radix-icons:arrow-left\" class=\"w-4 h-4\"/>\n        <span class=\"sr-only\">Previous slide</span>\n    {% endblock %}\n{% endcomponent %}"
      },
      {
        "name": "carousel_controller.js",
        "dir": "assets/controllers/ui",
        "content": "import {Controller} from \"@hotwired/stimulus\";\nimport EmblaCarousel from 'embla-carousel'\nimport '@kanety/stimulus-static-actions';\n\nexport default class UICarousel extends Controller {\n    static targets = ['carousel', 'content', 'item', 'previous', 'next']\n    static values = {\n        orientation: String,\n        options: Object\n    }\n    static actions = [\n        ['previous', 'click->scrollPrev'],\n        ['next', 'click->scrollNext'],\n    ];\n\n    initialize() {\n        this.api = EmblaCarousel(this.carouselTarget, this.optionsValue)\n\n        this.updateScrollButtonsState();\n        this.updateClasses();\n    }\n\n    scrollPrev() {\n        this.api.scrollPrev();\n        this.updateScrollButtonsState();\n    }\n\n    scrollNext() {\n        this.api.scrollNext();\n        this.updateScrollButtonsState();\n    }\n\n    updateScrollButtonsState() {\n        this.previousTarget.disabled = !this.api.canScrollPrev();\n        this.nextTarget.disabled = !this.api.canScrollNext();\n    }\n\n    updateClasses() {\n        const isHorizontal = this.orientationValue === 'horizontal';\n\n        const contentClass = isHorizontal ? ['-ml-4'] : ['-mt-4', 'flex-col'];\n        this.addClassesToElement(this.contentTarget, contentClass);\n\n        const itemClass = isHorizontal ? ['pl-4'] : ['pt-4'];\n        this.itemTargets.forEach(itemTarget => this.addClassesToElement(itemTarget, itemClass));\n\n        const previousClass = isHorizontal ? ['-left-12', 'top-1/2', '-translate-y-1/2'] : ['-top-12', 'left-1/2', '-translate-x-1/2', 'rotate-90'];\n        this.addClassesToElement(this.previousTarget, previousClass);\n\n        const nextClass = isHorizontal ? ['-right-12', 'top-1/2', '-translate-y-1/2'] : ['-bottom-12', 'left-1/2', '-translate-x-1/2', 'rotate-90'];\n        this.addClassesToElement(this.nextTarget, nextClass);\n    }\n\n    addClassesToElement(element, classes) {\n        classes.forEach(className => element.classList.add(className));\n    }\n}"
      }
    ]
  },
  {
    "name": "checkbox",
    "dependencies": [
      "@kanety/stimulus-static-actions"
    ],
    "registryDependencies": [],
    "iconDependencies": [
      "radix-icons:check"
    ],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/checkbox",
        "content": "{% props checked = false, disabled = false, required = false, id = null %}\n\n{% set isIndeterminate = (checked == 'indeterminate') %}\n{% set state = checked ? 'checked' : 'unchecked' %}\n\n<button {{ attributes.add(stimulus_controller('ui--checkbox', {\n    'id': id\n})).add(stimulus_target('ui--checkbox', 'button')).without('class') }}\n        type=\"button\"\n        role=\"checkbox\"\n        aria-checked=\"{{ isIndeterminate ? 'mixed' : (checked ? 'true' : 'false') }}\"\n        aria-required=\"{{ required ? 'true' : 'false' }}\"\n        data-state=\"{{ state }}\"\n        data-disabled=\"{{ disabled ? 'true' : 'false' }}\"\n        class=\"{{ ['peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground', attributes.render('class')] | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</button>"
      },
      {
        "name": "indicator.html.twig",
        "dir": "templates/components/ui/checkbox",
        "content": "<span {{ attributes.add(stimulus_target('ui--checkbox', 'indicator')).without('class') }}\n        class=\"{{ ['flex items-center justify-center text-current', attributes.render('class')] | tailwind_merge }}\"\n        style=\"pointer-events: none; display: none;\"\n>\n    <twig:ux:icon name=\"radix-icons:check\" class=\"w-4 h-4\"/>\n</span>"
      },
      {
        "name": "checkbox_controller.js",
        "dir": "assets/controllers/ui",
        "content": "import {Controller} from \"@hotwired/stimulus\";\nimport '@kanety/stimulus-static-actions';\n\nexport default class UICheckbox extends Controller {\n    static targets = ['button', 'indicator'];\n    static actions = [['button', 'click->toggle']];\n    static values = {id: String};\n\n    initialize() {\n        this.state = this.element.dataset.state;\n        this.label = null;\n        this.input = null;\n        if (this.idValue) {\n            this.label = document.querySelector(`label[for=\"${this.idValue}\"]`);\n            this.input = document.getElementById(this.idValue);\n            this.label && this.label.addEventListener('click', () => this.toggle());\n\n            if (this.input) {\n                this.state = this.input.checked ? 'checked' : 'unchecked';\n                this.updateCheckboxAttributes(this.state);\n            }\n        }\n        this.handleState();\n    }\n\n    updateCheckboxAttributes(state) {\n        this.buttonTarget.dataset.state = state;\n        this.buttonTarget.setAttribute('aria-checked', state === 'checked' ? 'true' : 'false');\n        this.indicatorTarget.dataset.state = state;\n    }\n\n    getCheckboxState() {\n        return this.state === 'checked' ? 'unchecked' : 'checked';\n    }\n\n    handleState() {\n        this.state === 'checked' ? this.handleChecked() : this.handleUnchecked();\n    }\n\n    handleChecked() {\n        this.indicatorTarget.style.removeProperty('display');\n    }\n\n    handleUnchecked() {\n        this.indicatorTarget.style.display = 'none';\n    }\n\n    toggle() {\n        this.state = this.getCheckboxState();\n        this.updateCheckboxAttributes(this.state);\n        this.handleState();\n\n        if (this.input) {\n            this.input.dispatchEvent(new Event('change', {bubbles: true}));\n        }\n    }\n}"
      }
    ]
  },
  {
    "name": "collapsible",
    "dependencies": [
      "@kanety/stimulus-static-actions"
    ],
    "registryDependencies": [
      "button"
    ],
    "iconDependencies": [],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/collapsible",
        "content": "<div{{ attributes.add(stimulus_controller('ui--collapsible')) }} data-state=\"closed\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "trigger.html.twig",
        "dir": "templates/components/ui/collapsible",
        "content": "{% set attrs = attributes.add(stimulus_target('ui--collapsible', 'trigger')).defaults({\n    'aria-expanded': 'false',\n    'data-state': 'closed',\n}) %}\n\n{% component 'ui:button:root' with {...attrs} %}\n    {% block content %}{{ block(outerBlocks.content) }}{% endblock %}\n{% endcomponent %}"
      },
      {
        "name": "content.html.twig",
        "dir": "templates/components/ui/collapsible",
        "content": "<div{{ attributes.add(stimulus_target('ui--collapsible', 'content')) }} data-state=\"closed\" hidden>\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "collapsible_controller.js",
        "dir": "assets/controllers/ui",
        "content": "import {Controller} from \"@hotwired/stimulus\";\nimport '@kanety/stimulus-static-actions';\n\nexport default class UICollapsible extends Controller {\n    static targets = ['trigger', 'content'];\n    static actions = [\n        ['trigger', 'click->toggle']\n    ];\n\n    setDataState(target, state) {\n        target.setAttribute('data-state', state);\n    }\n\n    setAriaAttributes(target, expanded) {\n        target.setAttribute('aria-expanded', expanded);\n    }\n\n    toggle() {\n        const active = this.element.dataset.state === 'active';\n        this.contentTarget.hidden = active;\n\n        this.setDataState(this.element, active ? 'closed' : 'active');\n        this.setDataState(this.triggerTarget, active ? 'closed' : 'active');\n        this.setDataState(this.contentTarget, active ? 'closed' : 'active');\n        this.setAriaAttributes(this.triggerTarget, active ? 'false' : 'true');\n    }\n}"
      }
    ]
  },
  {
    "name": "input",
    "dependencies": [],
    "registryDependencies": [],
    "iconDependencies": [],
    "files": [
      {
        "name": "default.html.twig",
        "dir": "templates/components/ui/input",
        "content": "<input{{ attributes.add(stimulus_controller('ui--input')).without('class') }}\n        class=\"{{ ['flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 file:pt-[3px]', attributes.render('class') ?? ''] | tailwind_merge }}\">"
      },
      {
        "name": "textarea.html.twig",
        "dir": "templates/components/ui/input",
        "content": "<textarea{{ attributes.add(stimulus_controller('ui--input')).without('class') }} class=\"{{ ['flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50', attributes.render('class')] |tailwind_merge }}\">{% block content %}{% endblock %}</textarea>"
      },
      {
        "name": "input_controller.js",
        "dir": "assets/controllers/ui",
        "content": "import {Controller} from \"@hotwired/stimulus\";\n\nexport default class UIInput extends Controller {\n    setValue(newValue) {\n        this.element.value = newValue;\n        this.element.dispatchEvent(new Event('change', {bubbles: true}));\n    }\n}"
      }
    ]
  },
  {
    "name": "label",
    "dependencies": [],
    "registryDependencies": [],
    "iconDependencies": [],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/label",
        "content": "{% set labelVariants = cva({\n    base: 'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',\n}) %}\n\n<label {{ attributes.without('class') }} class=\"{{ labelVariants.apply({}, attributes.render('class') ?? '') | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</label>"
      }
    ]
  },
  {
    "name": "popover",
    "dependencies": [
      "@popperjs/core",
      "stimulus-use"
    ],
    "registryDependencies": [],
    "iconDependencies": [],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/popover",
        "content": "{% props placement = 'bottom', trigger = 'click', dismissAfter = null, matchWidth = false %}\n\n<div {{ attributes.add(stimulus_controller('ui--popover', { placement, trigger, dismissAfter, matchWidth })) }} data-state=\"closed\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "content.html.twig",
        "dir": "templates/components/ui/popover",
        "content": "<div {{ stimulus_target('ui--popover', 'wrapper') }} class=\"hidden\">\n    <div {{ attributes.add(stimulus_controller('ui--transition')).add(stimulus_target('ui--popover', 'content')).without('class') }}\n            data-state=\"open\"\n            role=\"dialog\"\n            data-side=\"{{ outerScope.placement }}\"\n            tabindex=\"-1\"\n            class=\"{{ ['z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2', attributes.render('class')] | tailwind_merge }}\">\n        {% block content %}{% endblock %}\n    </div>\n</div>"
      },
      {
        "name": "trigger.html.twig",
        "dir": "templates/components/ui/popover",
        "content": "{% if outerScope.trigger == 'hover' %}\n    {% set action = stimulus_action('ui--popover', 'toggle', 'mouseenter') %}\n{% elseif outerScope.trigger == 'focus' %}\n    {% set action = stimulus_action('ui--popover', 'toggle', 'focusin') %}\n{% else %}\n    {% set action = stimulus_action('ui--popover', 'toggle', outerScope.trigger) %}\n{% endif %}\n\n<div{{ attributes.add(stimulus_target('ui--popover', 'trigger')).add(action) }}>\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "popover_controller.js",
        "dir": "assets/controllers/ui",
        "content": "import {Controller} from \"@hotwired/stimulus\";\nimport {createPopper} from \"@popperjs/core\";\nimport {useClickOutside} from \"stimulus-use\";\n\nexport default class UIPopover extends Controller {\n    static targets = ['trigger', 'content', 'wrapper'];\n\n    static values = {\n        placement: String,\n        trigger: String,\n        dismissAfter: Number,\n        matchWidth: Boolean,\n    }\n\n    initialize() {\n        if (!['click', 'hover', 'focus'].includes(this.triggerValue)) {\n            throw new Error('Invalid trigger value');\n        }\n\n        if (!['auto', 'auto-start', 'auto-end', 'top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'right', 'right-start', 'right-end', 'left', 'left-start', 'left-end'].includes(this.placementValue)) {\n            throw new Error('Invalid placement value');\n        }\n    }\n\n    connect() {\n        useClickOutside(this);\n\n        if (this.matchWidthValue) {\n            this.contentTarget.style.width = this.triggerTarget.offsetWidth + \"px\";\n        }\n\n        this.popperInstance = createPopper(this.triggerTarget, this.wrapperTarget, {\n            placement: this.contentTarget.dataset.side || \"bottom\",\n            modifiers: [\n                {\n                    name: \"offset\",\n                    options: {\n                        offset: [0, 8],\n                    },\n                },\n            ],\n        });\n    }\n\n    // Show the popover\n    show() {\n        this.wrapperTarget.classList.remove(\"hidden\");\n        this.contentTarget.classList.remove(\"hidden\");\n        this.contentTarget.dataset.state = \"open\";\n    }\n\n    // Hide the popover\n    hide() {\n        this.wrapperTarget.classList.add(\"hidden\");\n        this.contentTarget.classList.add(\"hidden\");\n        this.contentTarget.dataset.state = \"closed\";\n    }\n\n    clickOutside(event) {\n        this.hide();\n    }\n\n    // Toggle the popover on demand\n    toggle(event) {\n        this.popperInstance.update();\n        if (this.wrapperTarget.classList.contains(\"hidden\")) {\n            this.show();\n\n            if (this.hasDismissAfterValue) {\n                setTimeout(() => {\n                    this.hide();\n                }, this.dismissAfterValue);\n            }\n        } else {\n            this.hide();\n        }\n    }\n}"
      },
      {
        "name": "transition_controller.js",
        "dir": "assets/controllers/ui",
        "content": "import { Controller } from \"@hotwired/stimulus\";\nimport { useTransition } from \"stimulus-use\";\n\nexport default class extends Controller {\n    connect() {\n        useTransition(this);\n    }\n}"
      }
    ]
  },
  {
    "name": "select",
    "dependencies": [],
    "registryDependencies": [
      "popover",
      "input"
    ],
    "iconDependencies": [
      "radix-icons:caret-sort"
    ],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/select",
        "content": "{% props placement = 'bottom-start', trigger = 'click', dismissAfter = null, matchWidth = true %}\n\n<div {{ attributes.add(stimulus_controller('ui--popover', {placement, trigger, dismissAfter, matchWidth})).without('class') }} class=\"{{ attributes.render('class') }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "content",
        "dir": "templates/components/ui/select",
        "content": "{% props id = null %}\n\n<div {{ stimulus_target('ui--popover', 'wrapper') }} class=\"hidden\">\n    <div {{ attributes.add(stimulus_target('ui--popover', 'content')).add(stimulus_controller(controllerName='ui--select', controllerOutlets={\n        'ui--input': '#' ~ id,\n        'ui--text': '#' ~ id,\n    })).without('class') }}\n            data-state=\"open\"\n            role=\"dialog\"\n            data-side=\"{{ outerScope.placement }}\"\n            tabindex=\"-1\"\n            class=\"{{ ['relative z-50 p-1 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2', attributes.render('class')] | tailwind_merge }}\"\n    >\n        {% block content %}{% endblock %}\n    </div>\n</div>"
      },
      {
        "name": "trigger.html.twig",
        "dir": "templates/components/ui/select",
        "content": "{% if outerScope.trigger == 'hover' %}\n    {% set action = stimulus_action('ui--popover', 'toggle', 'mouseenter') %}\n{% elseif outerScope.trigger == 'focus' %}\n    {% set action = stimulus_action('ui--popover', 'toggle', 'focusin') %}\n{% else %}\n    {% set action = stimulus_action('ui--popover', 'toggle', outerScope.trigger) %}\n{% endif %}\n\n<button {{ attributes.add(stimulus_target('ui--popover', 'trigger')).add(action).without('class') }} type=\"button\" class=\"{{ ['flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1', attributes.render('class')] | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n    <twig:ux:icon name=\"radix-icons:caret-sort\" class=\"h-4 w-4 opacity-50\" />\n</button>"
      },
      {
        "name": "item.html.twig",
        "dir": "templates/components/ui/select",
        "content": "{% props value = null %}\n\n<div {{ attributes.add(stimulus_target('ui--select', 'item')).add(stimulus_action('ui--popover', 'hide', 'click')).add(stimulus_action('ui--select', 'selectItem', 'click')).without('class') }}\n        role=\"menuitem\"\n        data-value=\"{{ value }}\"\n        class=\"{{ ['group/selectitem relative flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50', attributes.render('class')] |tailwind_merge }}\"\n>\n    <span class=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center hidden group-data-[selected=true]/selectitem:block\">\n        <twig:ux:icon name=\"radix-icons:check\" class=\"w-4 h-4\"/>\n    </span>\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "group.html.twig",
        "dir": "templates/components/ui/select",
        "content": "<div {{ attributes }}>\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "input.html.twig",
        "dir": "templates/components/ui/select",
        "content": "<input {{ attributes.add(stimulus_controller('ui--input')) }} type=\"hidden\" class=\"hidden\">"
      },
      {
        "name": "label.html.twig",
        "dir": "templates/components/ui/select",
        "content": "<h3 {{ attributes.without('class') }} class=\"{{ ['px-2 py-1.5 text-sm font-semibold', attributes.render('class')] | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</h3>"
      },
      {
        "name": "separator.html.twig",
        "dir": "templates/components/ui/select",
        "content": "<div {{ attributes.without('class') }}\n        class=\"{{ ['-mx-1 my-1 h-px bg-muted', attributes.render('class')] |tailwind_merge }}\"></div>"
      },
      {
        "name": "select_controller.js",
        "dir": "assets/controllers/ui",
        "content": "import {Controller} from \"@hotwired/stimulus\";\n\nexport default class UISelect extends Controller {\n    static targets = [\"item\"];\n    static outlets = [\"ui--input\", \"ui--text\"];\n\n    connect() {\n        this.setSelectedItem();\n    }\n\n    setSelectedItem() {\n        const selectedItem = this.selectedItem();\n\n        this.itemTargets.forEach((item) => {\n            item.removeAttribute(\"data-selected\");\n            item.removeAttribute(\"aria-selected\");\n        });\n\n        if (selectedItem) {\n            selectedItem.setAttribute(\"data-selected\", \"true\");\n            selectedItem.setAttribute(\"aria-selected\", \"true\");\n        }\n    }\n\n    selectedItem() {\n        return this.itemTargets.find((item) => {\n            return item.dataset.value === this.uiInputOutlet.element.value;\n        });\n    }\n\n    selectItem(event) {\n        event.preventDefault();\n        const selectedValue = event.currentTarget.dataset.value;\n        const selectedText = event.currentTarget.innerText;\n\n        this.setValue(selectedValue);\n        this.setInnerText(selectedText);\n\n        this.setSelectedItem()\n    }\n\n    setValue(selectedValue) {\n        this.uiInputOutlet.setValue(selectedValue);\n    }\n\n    setInnerText(selectedOption) {\n        this.uiTextOutlet.setText(selectedOption);\n    }\n}"
      },
      {
        "name": "text_controller.js",
        "dir": "assets/controllers/ui",
        "content": "import {Controller} from \"@hotwired/stimulus\";\n\nexport default class UIText extends Controller {\n    setText(content) {\n        this.element.innerText = content;\n    }\n}"
      }
    ]
  },
  {
    "name": "form",
    "dependencies": [],
    "registryDependencies": [
      "button",
      "checkbox",
      "select",
      "input"
    ],
    "iconDependencies": [],
    "files": [
      {
        "name": "button.html.twig",
        "dir": "templates/form/ui",
        "content": "{%- block button_row -%}\n    {%- set row_attr = row_attr|merge({class: ([row_attr.class|default(''), 'space-y-2'] | tailwind_merge)|trim }) -%}\n\n    <div{% with {attr: row_attr} %}{{ block('attributes') }}{% endwith %}>\n        {{- form_widget(form) -}}\n    </div>\n{%- endblock button_row -%}\n\n{%- block button_widget -%}\n    {%- if label is empty -%}\n        {%- if label_format is not empty -%}\n            {% set label = label_format|replace({\n                '%name%': name,\n                '%id%': id,\n            }) %}\n        {%- elseif label is not same as(false) -%}\n            {% set label = name|humanize %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set attributes = {id, name: full_name} %}\n    {% if disabled %}\n        {% set attributes = attributes|merge({disabled: 'disabled'}) %}\n    {% endif -%}\n\n    {%- for attrname, attrvalue in attr -%}\n        {%- if attrname in ['placeholder', 'title'] -%}\n            {% set attributes = attributes|merge({(attrname): translation_domain is same as(false) or attrvalue is null ? attrvalue : attrvalue|trans(attr_translation_parameters, translation_domain) }) %}\n        {%- elseif attrvalue is same as(true) -%}\n            {% set attributes = attributes|merge({(attrname): attrname}) %}\n        {%- elseif attrvalue is not same as(false) -%}\n            {% set attributes = attributes|merge({(attrname): attrvalue}) %}\n        {%- endif -%}\n    {%- endfor -%}\n\n    <twig:ui:button:root type=\"{{ type|default('button') }}\" {{ ...attributes }}>\n        {%- if translation_domain is same as(false) -%}\n            {%- if label_html is same as(false) -%}\n                {{- label -}}\n            {%- else -%}\n                {{- label|raw -}}\n            {%- endif -%}\n        {%- else -%}\n            {%- if label_html is same as(false) -%}\n                {{- label|trans(label_translation_parameters, translation_domain) -}}\n            {%- else -%}\n                {{- label|trans(label_translation_parameters, translation_domain)|raw -}}\n            {%- endif -%}\n        {%- endif -%}\n    </twig:ui:button:root>\n{%- endblock button_widget -%}\n\n{%- block submit_widget -%}\n    {%- set type = type|default('submit') -%}\n    {{ block('button_widget') }}\n{%- endblock submit_widget -%}\n\n{%- block reset_widget -%}\n    {%- set type = type|default('reset') -%}\n    {{ block('button_widget') }}\n{%- endblock reset_widget -%}"
      },
      {
        "name": "checkbox.html.twig",
        "dir": "templates/form/ui",
        "content": "{% block checkbox_row %}\n    {%- set row_attr = row_attr|merge({class: ([row_attr.class|default(''), 'space-y-2'] | tailwind_merge)|trim }) -%}\n\n    <div{% with {attr: row_attr} %}{{ block('attributes') }}{% endwith %}>\n        {{- form_label(form) -}}\n        {{- form_errors(form) -}}\n    </div>\n{% endblock %}\n\n{% block checkbox_label %}\n    {% if label is not same as(false) -%}\n        {% if not compound -%}\n            {% set label_attr = label_attr|merge({'for': id}) %}\n        {%- endif -%}\n        {% if required -%}\n            {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' required')|trim}) %}\n        {%- endif -%}\n\n        {% set class = '' %}\n        {% if errors|length > 0 %}\n            {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' text-destructive')|trim}) %}\n            {% set class = 'border-destructive data-[state=checked]:bg-destructive data-[state=checked]:text-destructive-foreground' %}\n        {% endif %}\n\n        {% set attributes = {} %}\n        {%- for attrname, attrvalue in label_attr -%}\n            {%- if attrname in ['placeholder', 'title'] -%}\n                {% set attributes = attributes|merge({(attrname): translation_domain is same as(false) or attrvalue is null ? attrvalue : attrvalue|trans(attr_translation_parameters, translation_domain) }) %}\n            {%- elseif attrvalue is same as(true) -%}\n                {% set attributes = attributes|merge({(attrname): attrname}) %}\n            {%- elseif attrvalue is not same as(false) -%}\n                {% set attributes = attributes|merge({(attrname): attrvalue}) %}\n            {%- endif -%}\n        {%- endfor -%}\n\n        {%- set widget_attr = {} -%}\n        {%- if help is not empty -%}\n            {%- set widget_attr = {attr: {'aria-describedby': id ~\"_help\"}} -%}\n        {%- endif -%}\n\n        <div class=\"flex flex-row items-start space-x-3 space-y-0\">\n            <twig:ui:checkbox:root id=\"{{ id }}\" class=\"{{ class }}\">\n                <twig:ui:checkbox:indicator/>\n            </twig:ui:checkbox:root>\n\n            {{- form_widget(form, widget_attr) -}}\n            <div class=\"space-y-2 leading-none\">\n                <twig:ui:label:root {{ ...attributes }}>\n                    {{ block(outerBlocks.form_label_content) }}\n                </twig:ui:label:root>\n                {{- form_help(form) -}}\n            </div>\n        </div>\n    {%- endif -%}\n{% endblock %}\n\n{%- block checkbox_widget -%}\n    <input type=\"checkbox\"\n            {{ block('widget_attributes') }}\n            {% if checked %} checked=\"checked\"{% endif %}\n           aria-hidden=\"true\"\n           tabindex=\"-1\"\n           style=\"opacity: 0; position: absolute; margin: 0; pointer-events: none;\"\n    />\n{%- endblock checkbox_widget -%}"
      },
      {
        "name": "choice.html.twig",
        "dir": "templates/form/ui",
        "content": "{%- block choice_widget_collapsed -%}\n    {%- if required and placeholder is none and not placeholder_in_choices and not multiple and (attr.size is not defined or attr.size <= 1) -%}\n        {% set required = false %}\n    {%- endif -%}\n\n    {% set attrs = {id, name: full_name} %}\n    {% if multiple %}{% set attrs = attrs|merge({multiple: true}) %}{% endif %}\n    {% if required %}{% set attrs = attrs|merge({required: true}) %}{% endif %}\n    {% if disabled %}{% set attrs = attrs|merge({disabled: true}) %}{% endif %}\n\n    {%- for attrname, attrvalue in attr -%}\n        {%- if attrname in ['placeholder', 'title'] -%}\n            {% set attrs = attrs|merge({(attrname): translation_domain is same as(false) or attrvalue is null ? attrvalue : attrvalue|trans(attr_translation_parameters, translation_domain) }) %}\n        {%- elseif attrvalue is same as(true) -%}\n            {% set attrs = attrs|merge({(attrname): attrname}) %}\n        {%- elseif attrvalue is not same as(false) -%}\n            {% set attrs = attrs|merge({(attrname): attrvalue}) %}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {% macro filter_choice(choices, value, choice_translation_domain) %}\n        {%- if choices is iterable -%}\n            {%- for choice in choices -%}\n                {%- if choice is iterable -%}\n                    {%- set choices = choice -%}\n                    {{- _self.filter_choice(choices, value) -}}\n                {%- elseif choice.value == value -%}\n                    {{- choice_translation_domain is same as(false) ? choice.label : choice.label|trans(choice.labelTranslationParameters, choice_translation_domain) -}}\n                {%- endif -%}\n            {%- endfor -%}\n        {%- else -%}\n            {%- if choices.value == value -%}\n                {{- choice_translation_domain is same as(false) ? choices.label : choices.label|trans(choices.labelTranslationParameters, choice_translation_domain) -}}\n            {%- endif -%}\n        {%- endif -%}\n    {%- endmacro %}\n\n    {% import _self as macros %}\n    {% set currentValue = macros.filter_choice(choices, value, choice_translation_domain) %}\n\n    <twig:ui:select:root {{ ...attrs }}>\n        <twig:ui:select:input {{ ...attrs }}/>\n\n        {% set triggerAttrs = { class:'w-full' } %}\n        {% if errors|length > 0 %}\n            {% set triggerAttrs = triggerAttrs|merge({class: (errorAttrs.class|default('w-full') ~ ' border border-destructive focus:ring-destructive text-destructive')|trim}) %}\n        {% endif %}\n\n        <twig:ui:select:trigger {{ ...triggerAttrs }}>\n            {% if currentValue is not empty %}\n                <twig:ui:select:value\n                        placeholder=\"{{ placeholder != '' ? (translation_domain is same as(false) ? placeholder : placeholder|trans({}, translation_domain)) }}\"\n                        id=\"{{ attrs.id }}\">\n                    {{ currentValue }}\n                </twig:ui:select:value>\n            {% else %}\n                <twig:ui:select:value\n                        placeholder=\"{{ placeholder != '' ? (translation_domain is same as(false) ? placeholder : placeholder|trans({}, translation_domain)) }}\"\n                        id=\"{{ attrs.id }}\"/>\n            {% endif %}\n        </twig:ui:select:trigger>\n\n        {% with {content: outerBlocks.choice_widget_options} %}\n            <twig:ui:select:content id=\"{{ attrs.id }}\">\n                {%- if preferred_choices|length > 0 -%}\n                    {% set options = preferred_choices %}\n                    {% set render_preferred_choices = true %}\n\n                    {{- block(content) -}}\n\n                    {%- if choices|length > 0 and separator is not none -%}\n                        <twig:ui:select:separator/>\n                    {%- endif -%}\n                {%- endif -%}\n                {%- set options = choices -%}\n                {%- set render_preferred_choices = false -%}\n\n                {{- block(content) -}}\n            </twig:ui:select:content>\n        {% endwith %}\n    </twig:ui:select:root>\n{%- endblock choice_widget_collapsed -%}\n\n{% block choice_widget_options %}\n    {% for group_label, choice in options %}\n        {%- if choice is iterable -%}\n            <twig:ui:select:group>\n                {% set options = choice %}\n                    <twig:ui:select:label>\n                        {{ choice_translation_domain is same as(false) ? group_label : group_label|trans({}, choice_translation_domain) }}\n                    </twig:ui:select:label>\n                    {{- block(content) -}}\n            </twig:ui:select:group>\n        {%- else -%}\n            {% set attr = choice.attr %}\n            {% if not render_preferred_choices|default(false) and choice is selectedchoice(value) %}\n                {% set attr = attr|merge({ selected: 'selected' }) %}\n            {% endif %}\n            <twig:ui:select:item {{ ...choice.attr }} value=\"{{ choice.value }}\">\n                {{ choice_translation_domain is same as(false) ? choice.label : choice.label|trans(choice.labelTranslationParameters, choice_translation_domain) }}\n            </twig:ui:select:item>\n        {%- endif -%}\n    {% endfor %}\n{% endblock %}\n\n"
      },
      {
        "name": "form.html.twig",
        "dir": "templates/form/ui",
        "content": "{%- block form_widget -%}\n    {% if compound %}\n        {{- block('form_widget_compound') -}}\n    {% else %}\n        {{- block('form_widget_simple') -}}\n    {% endif %}\n{%- endblock form_widget -%}\n\n{%- block form_widget_compound -%}\n    <div {{ block('widget_container_attributes') }}>\n        {%- if form is rootform -%}\n            {{ form_errors(form) }}\n        {%- endif -%}\n        {{- block('form_rows') -}}\n        {{- form_rest(form) -}}\n    </div>\n{%- endblock form_widget_compound -%}\n\n{% block form_row %}\n    {%- set widget_attr = {} -%}\n    {%- if help is not empty -%}\n        {%- set widget_attr = {attr: {'aria-describedby': id ~\"_help\"}} -%}\n    {%- endif -%}\n\n    {%- set row_attr = row_attr|merge({class: ([row_attr.class|default(''), 'space-y-2'] | tailwind_merge)|trim }) -%}\n\n    <div{% with {attr: row_attr} %}{{ block('attributes') }}{% endwith %}>\n        {{- form_label(form) -}}\n        {{- form_widget(form, widget_attr) -}}\n        {{- form_help(form) -}}\n        {{- form_errors(form) -}}\n    </div>\n{% endblock %}\n\n{% block form_errors %}\n    {%- if errors|length > 0 -%}\n        <ul>\n            {%- for error in errors -%}\n                <li class=\"text-[0.8rem] font-medium text-destructive\">{{ error.message }}</li>\n            {%- endfor -%}\n        </ul>\n    {%- endif -%}\n{% endblock %}\n\n{% block form_help %}\n    {%- if help is not empty -%}\n        {%- set help_attr = help_attr|merge({class: ([help_attr.class|default(''), 'text-[0.8rem] text-muted-foreground help-text'] | tailwind_merge)|trim }) -%}\n\n        <p id=\"{{ id }}_help\"{% with { attr: help_attr } %}{{ block('attributes') }}{% endwith %}>\n            {{- block('form_help_content') -}}\n        </p>\n    {%- endif -%}\n{% endblock %}"
      },
      {
        "name": "input.html.twig",
        "dir": "templates/form/ui",
        "content": "{% block form_widget_simple %}\n    {%- set type = type|default('text') -%}\n    {%- if type == 'range' or type == 'color' -%}\n        {# Attribute \"required\" is not supported #}\n        {%- set required = false -%}\n    {%- endif -%}\n\n    {% set attributes = {id, name: full_name} %}\n\n    {%- if disabled %} {% set attributes = attributes|merge({disabled: 'disabled'}) %} {% endif -%}\n    {%- if required %} {% set attributes = attributes|merge({required: 'required'}) %} {% endif -%}\n    {%- if value is not empty %} {% set attributes = attributes|merge({value: value}) %} {% endif -%}\n\n    {%- for attrname, attrvalue in attr -%}\n        {%- if attrname in ['placeholder', 'title'] -%}\n            {% set attributes = attributes|merge({(attrname): translation_domain is same as(false) or attrvalue is null ? attrvalue : attrvalue|trans(attr_translation_parameters, translation_domain) }) %}\n        {%- elseif attrvalue is same as(true) -%}\n            {% set attributes = attributes|merge({(attrname): attrname}) %}\n        {%- elseif attrvalue is not same as(false) -%}\n            {% set attributes = attributes|merge({(attrname): attrvalue}) %}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {% if errors|length > 0 %}\n        {% set attributes = attributes|merge({class: (attributes.class|default('') ~ ' border border-destructive focus:ring-destructive focus-visible:ring-destructive text-destructive')|trim}) %}\n    {% endif %}\n\n    <twig:ui:input:default {{ ...attributes }} type=\"{{ type }}\"></twig:ui:input:default>\n{% endblock %}\n\n{% block form_label %}\n    {% if label is not same as(false) -%}\n        {% if not compound -%}\n            {% set label_attr = label_attr|merge({'for': id}) %}\n        {%- endif -%}\n        {% if required -%}\n            {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' required')|trim}) %}\n        {%- endif -%}\n\n        {% if errors|length > 0 %}\n            {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' text-destructive')|trim}) %}\n        {% endif %}\n\n        {% set attributes = {} %}\n        {%- for attrname, attrvalue in label_attr -%}\n            {%- if attrname in ['placeholder', 'title'] -%}\n                {% set attributes = attributes|merge({(attrname): translation_domain is same as(false) or attrvalue is null ? attrvalue : attrvalue|trans(attr_translation_parameters, translation_domain) }) %}\n            {%- elseif attrvalue is same as(true) -%}\n                {% set attributes = attributes|merge({(attrname): attrname}) %}\n            {%- elseif attrvalue is not same as(false) -%}\n                {% set attributes = attributes|merge({(attrname): attrvalue}) %}\n            {%- endif -%}\n        {%- endfor -%}\n\n        <twig:ui:label:root {{ ...attributes }}>\n            {{ block(outerBlocks.form_label_content) }}\n        </twig:ui:label:root>\n    {%- endif -%}\n{% endblock %}\n\n{%- block percent_widget -%}\n    {%- set type = 'number' -%}\n    {{ block('form_widget_simple') }}\n{%- endblock percent_widget -%}\n\n{%- block percent_label -%}\n    {%- if label is not same as(false) -%}\n        {% set label_attr = label_attr|merge({'for': id}) %}\n        {% if required -%}\n            {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' required')|trim}) %}\n        {%- endif -%}\n\n        {% if errors|length > 0 %}\n            {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' text-destructive')|trim}) %}\n        {% endif %}\n\n        {% set attributes = {} %}\n        {%- for attrname, attrvalue in label_attr -%}\n            {%- if attrname in ['placeholder', 'title'] -%}\n                {% set attributes = attributes|merge({(attrname): translation_domain is same as(false) or attrvalue is null ? attrvalue : attrvalue|trans(attr_translation_parameters, translation_domain) }) %}\n            {%- elseif attrvalue is same as(true) -%}\n                {% set attributes = attributes|merge({(attrname): attrname}) %}\n            {%- elseif attrvalue is not same as(false) -%}\n                {% set attributes = attributes|merge({(attrname): attrvalue}) %}\n            {%- endif -%}\n        {%- endfor -%}\n\n        <twig:ui:label:root {{ ...attributes }}>\n            {{ block(outerBlocks.form_label_content) }} {% if symbol %}({{ symbol|default('%') }}){% endif %}\n        </twig:ui:label:root>\n    {%- endif -%}\n{%- endblock percent_label -%}\n\n{%- block money_widget -%}\n    {%- set type = 'number' -%}\n    {{ block('form_widget_simple') }}\n{%- endblock money_widget -%}\n\n{%- block money_label -%}\n    {%- if label is not same as(false) -%}\n        {% set label_attr = label_attr|merge({'for': id}) %}\n        {% if required -%}\n            {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' required')|trim}) %}\n        {%- endif -%}\n\n        {% if errors|length > 0 %}\n            {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' text-destructive')|trim}) %}\n        {% endif %}\n\n        {% set attributes = {} %}\n        {%- for attrname, attrvalue in label_attr -%}\n            {%- if attrname in ['placeholder', 'title'] -%}\n                {% set attributes = attributes|merge({(attrname): translation_domain is same as(false) or attrvalue is null ? attrvalue : attrvalue|trans(attr_translation_parameters, translation_domain) }) %}\n            {%- elseif attrvalue is same as(true) -%}\n                {% set attributes = attributes|merge({(attrname): attrname}) %}\n            {%- elseif attrvalue is not same as(false) -%}\n                {% set attributes = attributes|merge({(attrname): attrvalue}) %}\n            {%- endif -%}\n        {%- endfor -%}\n\n        <twig:ui:label:root {{ ...attributes }}>\n            {% set currency = money_pattern[:1] %}\n            {{ block(outerBlocks.form_label_content) }} {% if currency %}({{ currency|default('€') }}){% endif %}\n        </twig:ui:label:root>\n    {%- endif -%}\n{%- endblock money_label -%}\n\n{%- block textarea_widget -%}\n    {% set attributes = {id, name: full_name} %}\n\n    {%- if disabled %} {% set attributes = attributes|merge({disabled: 'disabled'}) %} {% endif -%}\n    {%- if required %} {% set attributes = attributes|merge({required: 'required'}) %} {% endif -%}\n    {%- if value is not empty %} {% set attributes = attributes|merge({value: value}) %} {% endif -%}\n\n    {%- for attrname, attrvalue in attr -%}\n        {%- if attrname in ['placeholder', 'title'] -%}\n            {% set attributes = attributes|merge({(attrname): translation_domain is same as(false) or attrvalue is null ? attrvalue : attrvalue|trans(attr_translation_parameters, translation_domain) }) %}\n        {%- elseif attrvalue is same as(true) -%}\n            {% set attributes = attributes|merge({(attrname): attrname}) %}\n        {%- elseif attrvalue is not same as(false) -%}\n            {% set attributes = attributes|merge({(attrname): attrvalue}) %}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {% if errors|length > 0 %}\n        {% set attributes = attributes|merge({class: (attributes.class|default('') ~ ' border border-destructive focus-visible:ring-destructive text-destructive')|trim}) %}\n    {% endif %}\n\n    <twig:ui:input:textarea {{ ...attributes }}>{{ value }}</twig:ui:input:textarea>\n{%- endblock textarea_widget -%}"
      }
    ]
  }
]