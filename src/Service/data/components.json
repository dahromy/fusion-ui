[
  {
    "name": "accordion",
    "dependencies": [],
    "registryDependencies": [],
    "iconDependencies": [
      "radix-icons:caret-down"
    ],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/accordion",
        "content": "{% props type = \"single\" %}\n\n<div{{ attributes.add(stimulus_controller('ui--accordion', { type })) }}>\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "trigger.html.twig",
        "dir": "templates/components/ui/accordion",
        "content": "<button {{ attributes.add(stimulus_target('ui--accordion', 'trigger')).add(stimulus_action('ui--accordion', 'toggle', 'click')).without('class') }}\n        type=\"button\" aria-expanded=\"false\"\n        data-state=\"closed\"\n        class=\"{{ [attributes.render('class') ?? 'w-full flex flex-1 items-center w-full justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>span>svg]:rotate-180']| tailwind_merge }}\"\n>\n    {% block content %}{% endblock %}\n</button>"
      },
      {
        "name": "item.html.twig",
        "dir": "templates/components/ui/accordion",
        "content": "{% props disabled = false %}\n\n<div{{ attributes.add(stimulus_target('ui--accordion', 'item')).add(stimulus_action('ui--accordion', 'keydown', 'keydown')).without('class') }}\n        {% if disabled %} data-disabled {% endif %} data-state=\"closed\"\n        class=\"{{ [attributes.render('class') ?? 'border-b st-accordion']|tailwind_merge }}\"\n>\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "icon.html.twig",
        "dir": "templates/components/ui/accordion",
        "content": "<span{{ attributes.add(stimulus_target('ui--accordion', 'icon')).without('class') }} class=\"{{ ['opacity-50', attributes.render('class')] | tailwind_merge }}\">\n    {% if block('content') is defined and block('content') is not empty %}\n        {% block content %}{% endblock %}\n    {% else %}\n        <twig:ux:icon name=\"radix-icons:caret-down\"\n                      class=\"h-5 w-5 shrink-0 text-muted-foreground transition-transform duration-200\"/>\n    {% endif %}\n</span>"
      },
      {
        "name": "default_trigger.html.twig",
        "dir": "templates/components/ui/accordion",
        "content": "<button {{ attributes.add(stimulus_target('ui--accordion', 'trigger')).add(stimulus_action('ui--accordion', 'toggle', 'click')).without('class') }}\n        type=\"button\" aria-expanded=\"false\"\n        class=\"{{ ['flex flex-1 items-center w-full justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>span>svg]:rotate-180', attributes.render('class')]| tailwind_merge }}\"\n>\n    <p>{% block content %}{% endblock %}</p>\n    <twig:ui:accordion:icon/>\n</button>"
      },
      {
        "name": "content.html.twig",
        "dir": "templates/components/ui/accordion",
        "content": "<div{{ attributes.add(stimulus_target('ui--accordion', 'content')).without('class') }}\n        class=\"{{ 'overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down'|tailwind_merge }}\"\n        hidden\n>\n    <div class=\"{{ ['pb-4 pt-0', attributes.render('class')]|tailwind_merge }}\">\n        {% block content %}{% endblock %}\n    </div>\n</div>"
      },
      {
        "name": "accordion_controller.js",
        "dir": "assets/controllers/ui",
        "content": "import {Controller} from \"@hotwired/stimulus\";\n\nconst ACCORDION_KEYS = ['Home', 'End', 'ArrowDown', 'ArrowUp', 'ArrowLeft', 'ArrowRight'];\n\nexport default class UIAccordion extends Controller {\n    static targets = [\"item\", \"trigger\", \"content\"];\n    static values = {type: String}\n\n    initialize() {\n        // validate value type\n        if (!['single', 'multiple'].includes(this.typeValue)) {\n            throw new Error('Failed prop type: Invalid prop `type` supplied to `accordion:root`. Expected one of `single | multiple`.')\n        }\n\n        this.setIndicesAndStyles(this.itemTargets);\n        this.setIndicesAndStyles(this.triggerTargets);\n        this.setIndicesAndStyles(this.contentTargets, content => {\n            content.style.setProperty('--radix-accordion-content-height', 'var(--radix-collapsible-content-height)');\n            content.style.setProperty('--radix-accordion-content-width', 'var(--radix-collapsible-content-width)');\n        });\n    }\n\n    setIndicesAndStyles(targetsArray, extraOperation = () => {\n    }) {\n        targetsArray.forEach((item, index) => {\n            item.setAttribute(\"data-index\", index);\n            extraOperation(item);\n        });\n    }\n\n    keydown(event) {\n        if (!ACCORDION_KEYS.includes(event.key)) return;\n\n        const target = event.target;\n        const orientation = this.element.getAttribute(\"data-orientation\");\n        const isDirectionLTR = this.element.getAttribute(\"data-direction\") === 'ltr';\n        const triggerIndex = parseInt(target.getAttribute(\"data-index\"));\n        const triggerCount = this.triggerTargets.length;\n\n        if (triggerIndex === -1) return;\n\n        // Prevents page scroll while user is navigating\n        event.preventDefault();\n\n        let nextIndex = triggerIndex;\n        const homeIndex = 0;\n        const endIndex = triggerCount - 1;\n\n        const operations = {\n            moveNext: () => {\n                nextIndex = triggerIndex + 1;\n                nextIndex = nextIndex > endIndex ? homeIndex : nextIndex;\n            }, movePrev: () => {\n                nextIndex = triggerIndex - 1;\n                nextIndex = nextIndex < homeIndex ? endIndex : nextIndex;\n            }\n        };\n        const keyMappings = {\n            \"Home\": () => nextIndex = homeIndex, \"End\": () => nextIndex = endIndex, \"ArrowRight\": () => {\n                if (orientation === 'horizontal') {\n                    isDirectionLTR ? operations.moveNext() : operations.movePrev();\n                }\n            }, \"ArrowDown\": () => {\n                if (orientation === 'vertical') {\n                    operations.moveNext();\n                }\n            }, \"ArrowLeft\": () => {\n                if (orientation === 'horizontal') {\n                    isDirectionLTR ? operations.movePrev() : operations.moveNext();\n                }\n            }, \"ArrowUp\": () => {\n                if ('vertical' === orientation) {\n                    operations.movePrev();\n                }\n            }\n        };\n\n        const keyFunction = keyMappings[event.key];\n        if (keyFunction) {\n            keyFunction();\n        }\n\n        const clampedIndex = nextIndex % triggerCount;\n        this.triggerTargets[clampedIndex]?.focus();\n    }\n\n    setElementState(element, isOpen) {\n        const stateStr = isOpen ? 'open' : 'closed';\n        element.dataset.state = stateStr;\n    }\n\n    setInitialContentProperties(contentElement, isOpen) {\n        contentElement.hidden = isOpen;\n        contentElement.style.setProperty('--radix-collapsible-content-height', contentElement.scrollHeight + \"px\");\n        contentElement.style.setProperty('--radix-collapsible-content-width', contentElement.scrollWidth + \"px\");\n        contentElement.hasBeenClicked = true;\n    }\n\n    closeLastOpenedElement(index) {\n        if (this.lastOpenIndex !== undefined && this.lastOpenIndex !== index) {\n            const lastContent = this.contentTargets[this.lastOpenIndex];\n            const lastItem = this.itemTargets[this.lastOpenIndex];\n            const lastTrigger = this.triggerTargets[this.lastOpenIndex];\n\n            this.setElementState(lastContent, false);\n            this.setElementState(lastItem, false);\n            this.setElementState(lastTrigger, false);\n\n            setTimeout(() => {\n                lastContent.hidden = true;\n            }, 180);\n        }\n    }\n\n    toggle(event) {\n        event.preventDefault();\n        const trigger = event.currentTarget;\n\n        const triggerIndex = parseInt(trigger.getAttribute(\"data-index\"));\n        const content = this.contentTargets[triggerIndex];\n        const item = this.itemTargets[triggerIndex];\n\n        if (item.hasAttribute('data-disabled')) return;\n\n        if (this.typeValue !== 'multiple') {\n            this.closeLastOpenedElement(triggerIndex);\n        }\n\n        const shouldOpen = content.dataset.state !== 'open';\n\n        this.setElementState(content, shouldOpen);\n        this.setElementState(item, shouldOpen);\n        this.setElementState(trigger, shouldOpen);\n        trigger.setAttribute('aria-expanded', shouldOpen);\n\n        if (!content.hasBeenClicked) {\n            this.setInitialContentProperties(content, !shouldOpen);\n        } else {\n            if (!shouldOpen) {\n                setTimeout(() => {\n                    content.hidden = true;\n                }, 180);\n            } else {\n                content.hidden = false;\n            }\n        }\n\n        this.lastOpenIndex = triggerIndex;\n    }\n}"
      }
    ],
    "type": "ui"
  },
  {
    "name": "alert",
    "dependencies": [],
    "registryDependencies": [],
    "iconDependencies": [],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/alert",
        "content": "{% props variant = 'default' %}\n\n{% set alertVariants = cva({\n    base: 'backdrop-blur relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7 ',\n    variants: {\n        variant: {\n            default: \"bg-muted/20 text-foreground\",\n            destructive: \"bg-destructive/5 border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n            warning: \"bg-warning/5 border-warning/50 text-warning dark:border-warning [&>svg]:text-warning\",\n            success: \"bg-success/5 border-success/50 text-success dark:border-success [&>svg]:text-success\",\n        }\n    },\n    defaultVariants: {\n        variant: \"default\",\n    },\n}) %}\n\n<div{{ attributes.without('class') }}\n        class=\"{{ alertVariants.apply({ variant }, attributes.render('class') ?? '') | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "title.html.twig",
        "dir": "templates/components/ui/alert",
        "content": "<div{{ attributes.without('class') }}\n        class=\"{{ ['mb-1 font-medium leading-none tracking-tight', attributes.render('class')]|tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "description.html.twig",
        "dir": "templates/components/ui/alert",
        "content": "<div{{ attributes.without('class') }}\n        class=\"{{ ['text-sm [&_p]:leading-relaxed', attributes.render('class')] | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      }
    ],
    "type": "ui"
  },
  {
    "name": "alert-dialog",
    "dependencies": ["@kanety/stimulus-static-actions"],
    "registryDependencies": ["button"],
    "iconDependencies": [],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "<div{{ attributes.add(stimulus_controller('ui--alert-dialog')) }}>\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "action.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "{% set attrs = attributes.add(stimulus_target('ui--alert-dialog', 'action')) %}\n\n{% component 'ui:button:root' with {...attrs} %}\n    {% block content %}{{ block(outerBlocks.content) }}{% endblock %}\n{% endcomponent %}"
      },
      {
        "name": "cancel.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "{% set attrs = attributes.add(stimulus_target('ui--alert-dialog', 'cancel')) %}\n\n{% component 'ui:button:root' with {...attrs} %}\n    {% block content %}{{ block(outerBlocks.content) }}{% endblock %}\n{% endcomponent %}"
      },
      {
        "name": "content.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "<twig:ui:alert-dialog:overlay/>\n<div {{ attributes.add(stimulus_target('ui--alert-dialog', 'content')).without('class') }}\n        role=\"alertdialog\" data-state=\"closed\" data-aria-hidden=\"true\" aria-hidden=\"true\" hidden\n        style=\"display:none;\"\n        class=\"{{ [attributes.render('class'), 'fixed left-[50%] top-[50%] z-50 grid gap-4 w-full max-w-lg translate-x-[-50%] translate-y-[-50%]  border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg'] | tailwind_merge }}\"\n>\n    {% block content %}{% endblock %}\n</div>\n"
      },
      {
        "name": "description.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "<div{{ attributes.add(stimulus_target('ui--alert-dialog', 'description')).without('class') }}\n        class=\"{{ ['text-sm text-muted-foreground', attributes.render('class')] | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "footer.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "<div{{ attributes.add(stimulus_target('ui--alert-dialog', 'footer')).without('class') }}\n        class=\"{{ ['flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', attributes.render('class')] | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "header.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "<div{{ attributes.add(stimulus_target('ui--alert-dialog', 'header')).without('class') }}\n        class=\"{{ ['flex flex-col space-y-2 text-center sm:text-left', attributes.render('class')] | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "overlay.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "<div{{ attributes.add(stimulus_target('ui--alert-dialog', 'overlay')).without('class') }}\n        hidden\n        data-state=\"closed\" data-aria-hidden=\"true\" aria-hidden=\"true\"\n        class=\"{{ ['fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0', attributes.render('class')] | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "title.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "<div{{ attributes.add(stimulus_target('ui--alert-dialog', 'title')).without('class') }}\n        class=\"{{ ['text-lg font-semibold', attributes.render('class')] | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "trigger.html.twig",
        "dir": "templates/components/ui/alert-dialog",
        "content": "<div{{ attributes.add(stimulus_target('ui--alert-dialog', 'trigger')).add(stimulus_action('ui--alert-dialog', 'open', 'click')) }}>\n    {% block content %}{% endblock %}\n</div>"
      },
      {
        "name": "alert-dialog_controller.js",
        "dir": "assets/controllers/ui",
        "content": "import {Controller} from \"@hotwired/stimulus\";\nimport '@kanety/stimulus-static-actions';\n\nexport default class UIAlertDialog extends Controller {\n    static targets = ['trigger', 'content', 'action', 'cancel', 'overlay'];\n    static actions = [\n        ['trigger', 'click->open'],\n        ['cancel', 'click->close'],\n        ['action', 'click->close']\n    ];\n\n    setDataState(target, state) {\n        target.setAttribute('data-state', state);\n    }\n\n    setAriaAttributes(target, expanded) {\n        target.setAttribute('aria-expanded', expanded);\n        target.setAttribute('aria-hidden', expanded === 'true' ? 'false' : 'true');\n        target.setAttribute('data-aria-hidden', expanded === 'true' ? 'false' : 'true');\n    }\n\n    setVisualAttributes(target, hidden, display) {\n        target.hidden = hidden;\n        if (display !== null) {\n            target.style.display = display;\n        }\n    }\n\n    open(e) {\n        this.triggerButton = e.target;\n        this.setDataState(this.element, 'open');\n        this.setDataState(this.triggerButton, 'open');\n        this.setDataState(this.contentTarget, 'open');\n        this.setDataState(this.overlayTarget, 'open');\n        this.setAriaAttributes(this.triggerButton, 'true');\n        this.setVisualAttributes(this.contentTarget, false, null);\n        this.setVisualAttributes(this.overlayTarget, false, null);\n        this.contentTarget.style.removeProperty('display');\n    }\n\n    close() {\n        this.setDataState(this.element, 'closed');\n        this.setDataState(this.triggerButton, 'closed');\n        this.setDataState(this.contentTarget, 'closed');\n        this.setDataState(this.overlayTarget, 'closed');\n        this.setAriaAttributes(this.triggerButton, 'false');\n\n        setTimeout(() => {\n            this.setVisualAttributes(this.contentTarget, true, 'none');\n            this.setVisualAttributes(this.overlayTarget, true, null);\n        }, 120)\n    }\n}"
      }
    ],
    "type": "ui"
  },
  {
    "name": "button",
    "dependencies": [],
    "registryDependencies": [],
    "iconDependencies": [],
    "files": [
      {
        "name": "root.html.twig",
        "dir": "templates/components/ui/button",
        "content": "{% props variant = 'default', size = 'default' %}\n\n{% set buttonVariants = cva({\n    base: 'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 ',\n    variants: {\n        variant: {\n            default:\"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n            destructive:\"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n            outline:\"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n            secondary:\"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n            ghost: \"hover:bg-accent hover:text-accent-foreground\",\n            link: \"text-primary underline-offset-4 hover:underline\",\n        },\n        size: {\n            default: \"h-9 px-4 py-2\",\n            sm: \"h-8 rounded-md px-3 text-xs\",\n            lg: \"h-10 rounded-md px-8\",\n            icon: \"h-9 w-9\",\n        },\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\",\n    },\n}) %}\n\n{% set hasHref = attributes.all.href is defined %}\n{% set slot = hasHref ? 'a' : 'button' %}\n\n<{{ slot }}{{ attributes.without('class') }} class=\"{{ buttonVariants.apply({ variant, size }, attributes.render('class') ?? '') | tailwind_merge }}\">\n    {% block content %}{% endblock %}\n</{{ slot }}>"
      }
    ]
  }
]